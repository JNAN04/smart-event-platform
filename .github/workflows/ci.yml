name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-auth-service:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/auth-service/package-lock.json
      
      - name: Install dependencies
        working-directory: ./services/auth-service
        run: npm ci
      
      - name: Run linter
        working-directory: ./services/auth-service
        run: npm run lint || echo "No lint script found"
      
      - name: Run tests
        working-directory: ./services/auth-service
        run: npm test

  test-event-service:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/event-service/package-lock.json
      
      - name: Install dependencies
        working-directory: ./services/event-service
        run: npm ci
      
      - name: Run tests
        working-directory: ./services/event-service
        run: npm test

  test-booking-service:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/booking-service/package-lock.json
      
      - name: Install dependencies
        working-directory: ./services/booking-service
        run: npm ci
      
      - name: Run tests
        working-directory: ./services/booking-service
        run: npm test

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --passWithNoTests

  build-docker-images:
    runs-on: ubuntu-latest
    needs: [test-auth-service, test-event-service, test-booking-service, test-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push auth-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/auth-service
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/event-platform-auth:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/event-platform-auth:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push event-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/event-service
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/event-platform-event:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/event-platform-event:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push booking-service
        uses: docker/build-push-action@v4
        with:
          context: ./services/booking-service
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/event-platform-booking:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/event-platform-booking:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-docker-images]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'